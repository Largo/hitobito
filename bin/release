#!/usr/bin/env ruby
# frozen_string_literal: true

#  Copyright (c) 2020-2023, Puzzle ITC. This file is part of
#  hitobito and licensed under the Affero General Public License version 3
#  or later. See the COPYING file at the top-level directory or at
#  https://github.com/hitobito/hitobito.

begin
  require 'cmdparse'
rescue LoadError
  abort(<<~MESSAGE)
    Please install "cmdparse" to run the release-script
  MESSAGE
end

require_relative '../lib/release/main'

# basic setup
parser = CmdParse::CommandParser.new(handle_exceptions: true)
parser.main_options.program_name = 'release'
parser.main_options.version = '1.0.0'
parser.main_options.banner = 'Prepare the release for hitobito-composition (core and selected wagons)'

# global options
parser.global_options do |opt|
  opt.on('-n', '--dry-run', "Do not execute anything") do
    parser.data[:dry_run] = true
  end

  opt.on('-c', '--command-list', "Show commands that would be executed, implies dry-run") do
    parser.data[:command_list] = true
  end
end

parser.add_command(CmdParse::HelpCommand.new)
parser.add_command(CmdParse::VersionCommand.new)

# custom commands
parser.add_command('suggest-version') do |cmd|
  cmd.short_desc = 'Suggest a new version-number'

  cmd.add_command('patch', default: true) do |subcmd|
    subcmd.short_desc = 'Increment Patch-version'
    subcmd.takes_commands = false
    subcmd.action do
      releaser = Release::Main.new([])
      puts releaser.next_version(:patch)
    end
  end

  cmd.add_command('current-month') do |subcmd|
    subcmd.short_desc = 'set patch to current "YEAR-MONTH"'
    subcmd.takes_commands = false
    subcmd.action do
      releaser = Release::Main.new([])
      puts releaser.next_version(:current_month)
    end
  end

  cmd.add_command('integration') do |subcmd|
    subcmd.short_desc = 'append number to days to current production version'
    subcmd.takes_commands = false
    subcmd.action do
      releaser = Release::Main.new([])
      puts releaser.next_integration_version
    end
  end
end

parser.add_command('current-version') do |cmd|
  cmd.short_desc = 'Return the current version number'

  cmd.add_command('production', default: true) do |subcmd|
    subcmd.short_desc = 'PROD version'
    subcmd.takes_commands = false
    subcmd.action do
      releaser = Release::Main.new([])
      puts releaser.current_version(:production)
    end
  end

  cmd.add_command('integration') do |subcmd|
    subcmd.short_desc = 'INT version'
    subcmd.takes_commands = false
    subcmd.action do
      releaser = Release::Main.new([])
      puts releaser.current_version(:integration)
    end
  end
end

parser.add_command('integration') do |cmd|
  cmd.short_desc = 'Update composition-repo for integration-release'
  cmd.takes_commands = false
  cmd.action do |version|
    require 'pathname'
    dir = File.expand_path('../..', __dir__)
    all_wagons = Pathname.new(dir).children.flat_map do |dep|
      dep.to_s.scan(/hitobito_(\w+)/).first
    end.compact

    releaser = Release::Main.new(all_wagons)
    releaser.hitobito_group_dir = releaser.composition_repo_dir = dir
    releaser.version = version
    releaser.message = "Update integration to #{version}"
    releaser.dry_run = parser.data[:dry_run]
    releaser.command_list = parser.data[:command_list]
    releaser.standard_answer = true

    raise unless releaser.usable?

    releaser.update_integration
  end
end

parser.add_command('production') do |cmd|
  cmd.short_desc = 'Prepare composition-repo for production-release'
  cmd.takes_commands = false
  cmd.action do |version|
    require 'pathname'
    dir = File.expand_path('../..', __dir__)
    all_wagons = Pathname.new(dir).children.flat_map do |dep|
      dep.to_s.scan(/hitobito_(\w+)/).first
    end.compact

    releaser = Release::Main.new(all_wagons)
    releaser.hitobito_group_dir = releaser.composition_repo_dir = dir
    releaser.version = version
    releaser.dry_run = parser.data[:dry_run]
    releaser.command_list = parser.data[:command_list]
    releaser.standard_answer = true

    raise unless releaser.usable?

    releaser.update_production
  end
end

# ... and go
parser.parse
