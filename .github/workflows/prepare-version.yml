name: 'Composition Repo - Prepare Release'

on:
  workflow_call:
    inputs:
      composition:
        description: "Composition repository, e.g. ose_composition_pbs"
        type: string
        required: true
      wagon:
        description: "Name of the primary wagon"
        type: string
        required: true
      next_version:
        description: "Type of next version, patch or current-month"
        required: true
        type: string

permissions:
  contents: write

jobs:
  determine_version:
    runs-on: 'ubuntu-latest'
    outputs:
      version: ${{ steps.determine.outputs.version }}

    steps:
      - name: 'Checkout hitobito'
        uses: actions/checkout@v3
        with:
          repository: 'hitobito/hitobito'
          # TODO Remove attribute when PR is done
          ref: feature/1975-prepare-release

      - name: 'Set up Ruby'
        uses: ruby/setup-ruby@v1

      - name: 'Install dependencies'
        run: |
          gem install cmdparse

      - name: 'Get tag-names from repo'
        run: |
          git fetch --tags

      - name: 'Determine next version'
        id: determine
        env:
          VERSION_TYPE: ${{ inputs.next_version }}
        run: |
          next_version=$(bin/release suggest-version "$VERSION_TYPE")
          echo "version=${next_version}" >> "$GITHUB_OUTPUT"

  prepare_release:
    runs-on: 'ubuntu-latest'
    needs: determine_version

    steps:
      - name: 'Checkout composition repo'
        uses: actions/checkout@v3
        with:
          repository: "hitobito/${{ inputs.composition }}"
          ref: "production"
          submodules: true
          fetch-depth: 0
          token: ${{ secrets.RELEASE_PREPARATION_TOKEN }}

      - name: 'update submodules to release-state'
        env:
          TARGET_BRANCH: master
        run: |
          git submodule foreach "git fetch && git fetch --tags && git checkout ${TARGET_BRANCH}"

      # TODO Remove step when PR is done
      - name: 'prepare submodule to the work-in-progress state'
        run: |
          cd hitobito && git fetch origin && git checkout -t origin/feature/1975-prepare-release

      - name: 'Set up Ruby'
        uses: ruby/setup-ruby@v1
        with:
          working-directory: hitobito

      - name: 'Install and configure dependencies'
        env:
          TRANSIFEX_VERSION: "v1.6.4"
          TRANSIFEX_TOKEN: ${{ secrets.TRANSIFEX_TOKEN }}
        run: |
          gem install cmdparse pastel

          mkdir -p $HOME/.local/bin/
          echo "$HOME/.local/bin/" >> $GITHUB_PATH
          curl -L https://github.com/transifex/cli/releases/download/${TRANSIFEX_VERSION}/tx-linux-amd64.tar.gz | tar xz -C $HOME/.local/bin/
          echo -e "[https://www.transifex.com]\napi_hostname = https://api.transifex.com\nhostname = https://www.transifex.com\nusername = api\npassword = $TRANSIFEX_TOKEN\nrest_hostname = https://rest.api.transifex.com\ntoken = $TRANSIFEX_TOKEN" > $HOME/.transifexrc

          git config --global advice.detachedHead false

      - name: 'Configure Git-User for the Release-Commits'
        run: |
          # we could use gitub-actor for workflow_call, and last committers of
          # all wagons for scheduled releases. for now, this is fine.
          git config --global user.name "$(cd hitobito && git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(cd hitobito && git --no-pager log --format=format:'%ae' -n 1)"

      - name: 'Prepare release'
        env:
          NEXT_VERSION: ${{ needs.determine_version.outputs.version }}
          FIRST_WAGON: ${{ inputs.wagon }}
        run: |
          echo "Preparing $NEXT_VERSION for $FIRST_WAGON"

          hitobito/bin/release composition "$FIRST_WAGON" "$NEXT_VERSION"
